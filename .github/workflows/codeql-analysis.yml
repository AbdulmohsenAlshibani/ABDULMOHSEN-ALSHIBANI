# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
# ******** NOTE ********

name: "CodeQL"

on:
  push:
    branches: [ master ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master ]
  schedule:
    - cron: '37 0 * * 5'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
        # Learn more...
        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    #- run: |
    #   make bootstrap
    #   make release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
/**
 * This queue stores two tabs - last tab and current tab.
 * @type {chrome.tabs.TabActiveInfo[]}
 */
 let usedTabInfoQueue = [undefined, undefined]

 /**
 * Manage usedTabInfoQueue.
 */
 browser.tabs.onActivated.addListener(function (currentTab) {
 usedTabInfoQueue = [usedTabInfoQueue[1], currentTab]
 })
 /**
 * Switch window will not trigger 'onActivated' event.
 * So we have to manually save current window's current tab.
 */
 browser.windows.onFocusChanged.addListener(async function (windowId) {
 // -1 means focused a devtools debug window, just ignore it.
 if (windowId === -1) return

 const [{ id }] = await browser.tabs.query({windowId, active: true})
 usedTabInfoQueue = [usedTabInfoQueue[1], {windowId, tabId: id}]
 })

 /**
 * When close last tab, unset usedTabInfoQueue[0]
 * When close current tab, unset usedTabInfoQueue[1]
 * When close other tab, do nothing
 * When close window, unset usedTabInfoQueue[0] and usedTabInfoQueue[1]
 */
 browser.tabs.onRemoved.addListener(function (tabId) {
 // Do not use Array.prototype.filter, it will break queue.
 // Use Array.prototype.map to keep tab queued in right place.
 usedTabInfoQueue = usedTabInfoQueue.map(function (tab) {
 if (tab && tab.tabId === tabId) {
 return undefined
 }
 return tab
 })
 })

 async function switchToLastUsedTab() {
 const [lastTab, currentTab] = usedTabInfoQueue
 if (!lastTab) return

 if (lastTab.windowId !== currentTab.windowId) {
 /**
 * Call windows.update will trigger 'onFocusChanged' event.
 * Then the listener above will manage usedTabInfoQueue.
 */
 await browser.windows.update(lastTab.windowId, {focused: true})
 } else {
 /**
 * Call tabs.update will trigger 'onActivated' event.
 * Then the listener above will manage usedTabInfoQueue.
 */
 await browser.tabs.update(lastTab.tabId, {active: true})
 }
 }

 export default switchToLastUsedTa
